@page "/usuarios/editar/{UserId}"
@inject RepositorioUsuarios repositorio
@inject IMostrarMensajes mostrarMensajes

<h3>Editar Usuario</h3>

<div class="form-inline">

    <select class="form-control mb-2 mr-sm-2" @bind="rolSeleccionado">
        <option value="0">--Seleccione un rol--</option>
        @foreach (var rol in roles)
        {
            <option value="@rol.Nombre">@rol.Nombre</option>
        }
    </select>

    <button class="btn btn-info mb-2 mr-sm-2" @onclick="AsignarRol">Asignar Rol</button>
    <button class="btn btn-danger mb-2 mr-sm-2" @onclick="RemoverRol">Remover Rol</button>
</div>
@code {
    [Parameter] public string UserId { get; set; }
    private List<RolDTO> roles = new List<RolDTO>();
    private string rolSeleccionado = "0";

    protected override async Task OnInitializedAsync()
    {
        roles = await repositorio.GetRoles();
    }

    private async Task AsignarRol()
    {
        var esValido = await ValidarEditarRol();
        if (!esValido)
        {
            return;
        }

        var rolDTO = new EditarRolDTO() { RoleId = rolSeleccionado, UserId = UserId };
        await repositorio.AsignarRolUsuario(rolDTO);
        await mostrarMensajes.MostrarMensajeExitoso("Operación realizada");

    }

    private async Task RemoverRol()
    {
        var esValido = await ValidarEditarRol();
        if (!esValido)
        {
            return;
        }

        var rolDTO = new EditarRolDTO() { RoleId = rolSeleccionado, UserId = UserId };
        await repositorio.RemoverUsuarioRol(rolDTO);
        await mostrarMensajes.MostrarMensajeExitoso("Operación realizada");
    }

    private async Task<bool> ValidarEditarRol()
    {
        if (rolSeleccionado == "0")
        {
            await mostrarMensajes.MostrarMensajeError("Debe seleccionar un rol");
            return false;
        }

        return true;
    }
}